-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
        exp = memo $ eta syntax (expr [{[Left, {[s ("!!"), fun (l, op, r) {Binop ("!!", l, r)}]
                                                }],
                                        [Left, {[s ("&&"), fun (l, op, r) {Binop ("&&", l, r)}]
                                                }],
                                        [Nona, {[s ("=="), fun (l, op, r) {Binop ("==", l, r)}],
                                                [s ("!="), fun (l, op, r) {Binop ("!=", l, r)}],
                                                [s ("<="), fun (l, op, r) {Binop ("<=", l, r)}],
                                                [s ("<"),  fun (l, op, r) {Binop ("<", l, r)}],
                                                [s (">="), fun (l, op, r) {Binop (">=", l, r)}],
                                                [s (">"),  fun (l, op, r) {Binop (">", l, r)}]
                                                }],
                                        [Left, {[s ("+"), fun (l, op, r) {Binop ("+", l, r)}],
                                                [s ("-"), fun (l, op, r) {Binop ("-", l, r)}]
                                                }],
                                        [Left, {[s ("*"), fun (l, op, r) {Binop ("*", l, r)}],
                                                [s ("/"), fun (l, op, r) {Binop ("/", l, r)}],
                                                [s ("%"), fun (l, op, r) {Binop ("%", l, r)}]
                                        }]}, primary] | primary);

var stmtSeq = memo $ eta syntax (s1=stmt s[";"] sSeq=stmtSeq {Seq (s1, sSeq)} |
                                 stmt -end?),
       stmt = memo $ eta syntax (kSkip {Skip} |
                                 x=lident s[":="] e=exp {Assn (x, e)} |
                                 kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
                                 kWrite e=inbr[s("("), exp, s(")")] {Write (e)} |
                                 kWhile e=exp kDo s1=stmtSeq kOd {While (e, s1)} |
                                 -- TODO: simplify if? 
                                 kIf e=exp kThen s1=stmtSeq i=ifStmt kFi {If (e, s1, i)} |
                                 kIf e=exp kThen s1=stmtSeq kFi {If (e, s1, Skip)} |
                                 kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmtSeq kOd {Seq (s1, While (e, Seq (s3, s2)))} |
                                 -- TODO: fix in future? Exponentional complex
                                 kDo s1=stmtSeq kWhile e=exp kOd {Seq (s1, While (e, s1))}),
     ifStmt = memo $ eta syntax (kElif e=exp kThen s1=stmtSeq i=ifStmt {If (e, s1, i)} |
                                 kElif e=exp kThen s1=stmtSeq {If (e, s1, Skip)} |
                                 kElse s1=stmtSeq {s1});                              
   
-- kWhile e=exp kDo s1=stmtSeq {While (e, s1)} |

-- Public top-level parser
public parse = stmtSeq;
