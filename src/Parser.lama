-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |
                                  -- identifier      
                                  x=lident          {fun (a) {
                                                       case a of
                                                         Ref  -> Ref (x)
                                                       | Void -> Ignore (Var (x))
                                                       | _    -> Var (x)
                                                       esac
                                                    }} |
                                  kIf e=basic kThen s1=exp i=ifStmt kFi {fun (a) {If (e (Val), s1 (a), i (a))}} |
                                  kIf e=basic kThen s1=exp kFi {fun (a) {If (e (Val), s1 (a), Skip)}} |
                                  loc=pos kWhile e=basic kDo s1=exp kOd {fun (a) {assertVoid (a, While (e (Val), s1 (Void)), loc)}} |
                                --   loc=pos kDo e=exp kWhile s1=exp kOd {fun (a) {assertVoid (a, DoWhile (e (Val), s1 (Void)), loc)}} |
                                  loc=pos kDo s1=exp kWhile e=exp kOd {fun (a) {assertVoid (a, Seq (s1 (Void), While (e (Val), s1 (Void))), loc)}} |
                                  kFor s1=exp s[","] e=basic s[","] s2=exp kDo s3=exp kOd {fun (a) {assertVoid (a, Seq (s1 (Void), While (e (Val), Seq (s3 (Void), s2 (Void)))), loc)}} |
                                  kSkip {fun (a) {Skip}} |
                                  inbr[s("("), exp, s(")")] |
                                  loc=pos kRead x=inbr[s("("), lident, s(")")] {fun (a) {assertVoid (a, Read (x), loc)}} |
                                  loc=pos kWrite e=inbr[s("("), exp, s(")")] {fun (a) {assertVoid (a, Write (e (Val)), loc)}}
                                ),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}}),
    ifStmt   = memo $ eta syntax (kElif e=basic kThen s1=exp i=ifStmt {fun (a) {If (e (Val), s1 (a), i (a))}} |
                                  kElif e=basic kThen s1=exp {fun (a) {If (e (Val), s1 (a), Skip)}} |
                                  -kElse exp);

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
