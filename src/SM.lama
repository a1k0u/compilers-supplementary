-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalInsn (env, c, insn) {
  case insn of
    READ         -> case readWorld (getWorld (c)) of
                      [v, w] -> [ v : getStack (c), getState (c), w ]
                    esac
  | WRITE        -> case getStack (c) of
                      x : xs -> case writeWorld (x, getWorld (c)) of
                                  w -> [ xs, getState (c), w ]
                                esac
                    esac
  | BINOP (op)   -> case getStack (c) of
                      y : x : xs -> [ evalOp (op, x, y) : xs, getState (c), getWorld (c) ]
                    esac
  | LD    (x)    -> [ getState (c) (x) : getStack (c), getState (c), getWorld (c) ]
  | ST    (x)    -> case getStack (c) of
                      v : vs -> [ getStack (c), getState (c) <- [ x, v ], getWorld (c) ]
                    esac
  | CONST (n)    -> [ n : getStack (c), getState (c), getWorld (c) ]
  | LABEL (l)    -> c
  | JMP   (l)    -> [c, env.fromLabel (l)]
  -- TODO: make more dry
  | CJMP  (z, l) -> case getStack (c) of
                      x : xs -> case z of
                                  "nz" -> case x of
                                            0 -> [ xs, getState (c), getWorld (c) ]
                                          | _ -> [[ xs, getState (c), getWorld (c) ], env.fromLabel (l)]
                                          esac
                                | "z"  -> case x of
                                            0 -> [[ xs, getState (c), getWorld (c) ], env.fromLabel (l)]
                                          | _ -> [ xs, getState (c), getWorld (c) ]
                                          esac
                                esac
                    esac
  | DROP -> case getStack (c) of
              x : xs -> [ xs, getState (c), getWorld (c)]
            esac
  | STI -> case getStack (c) of
             v : Ref (x) : vs -> [ v : vs, getState (c) <- [x, v], getWorld (c) ]
           esac
  | LDA (x) -> [ Ref (x) : getStack (c), getState (c), getWorld (c) ]
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {}     -> c
  | x : xs -> 
    case evalInsn (env, c, x) of
      c@[_, _, _] -> eval (env, c, xs)
    | [c@[_, _, _], insns] -> eval (env, c, insns)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip                    -> [false, env, emptyBuffer ()]
    | Var    (x)              -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)              -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)              -> [false, env, singletonBuffer (CONST (n))]
    | Binop  (op, l, r)       -> 
        case env.genLabels (2) of
          [lLab, rLab, env] -> 
              case compile (lLab, env, l) of
                [lLabUsed, env, lCode] -> 
                    case compile (rLab, env, r) of
                        [rLabUsed, env, rCode] -> [false, env, lCode <+> label (lLab, lLabUsed) <+> rCode <+> label (rLab, rLabUsed) <+ BINOP (op)]
                    esac
              esac
        esac
    | Ignore (e)              -> 
        case compile (lab, env, e) of
          [labUsed, env, eCode] -> [labUsed, env, eCode <+ DROP]
        esac
    | Read   (x)              -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write  (e)              -> 
        case env.genLabel of
          [eLab, env] -> 
              case compile (eLab, env, e) of
                [eUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eUsed) <+ WRITE]
              esac
        esac
    | Assn   (Ref (x), e)     -> 
        case compile (lab, env, e) of
          [labUsed, env, eCode] -> [labUsed, env, eCode <+ ST (x)]
        esac 
    | Assn   (e1, e2)         -> 
        case env.genLabels (2) of
          [e1Lab, e2Lab, env] ->
              case compile (e1Lab, env, e1) of
                [e1LabUsed, env, e1Code] -> 
                    case compile (e2Lab, env, e2) of
                      [e2LabUsed, env, e2Code] -> [false, env, e1Code <+> label (e1Lab, e1LabUsed) <+> e2Code <+> label (e2Lab, e2LabUsed) <+ STI]
                    esac
              esac
        esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) ->
        case env.genLabel of
          [elseLab, env] ->
            case compile (lab, env, s1) of
              [_, env, s1Code] ->
                case compile (lab, env, s2) of
                  -- TODO: `JUMP (lab)` if lab used?
                  [_, env, s2Code] -> 
                    -- lab ?
                    case compile (lab, env, e) of
                      [_, env, eCode] -> [true, env, 
                        eCode                                 <+> 
                        singletonBuffer (CJMP ("z", elseLab)) <+> 
                        s1Code                                <+> 
                        singletonBuffer (JMP (lab))           <+> 
                        singletonBuffer (LABEL (elseLab))     <+> 
                        s2Code]
                    esac
                esac
            esac
        esac
    | While (e, s1) ->
        case env.genLabels (2) of
          [eLab, s1Lab, env] -> 
            case compile (eLab, env, s1) of
              -- TODO: lab used?
              [_, env, s1Code] -> 
                case compile (eLab, env, e) of
                  [_, env, eCode] -> [true, env, 
                    singletonBuffer (JMP (eLab))         <+> 
                    singletonBuffer (LABEL (s1Lab))      <+>
                    s1Code                               <+>
                    singletonBuffer (LABEL (eLab))       <+>
                    eCode                                <+>
                    singletonBuffer (CJMP ("nz", s1Lab)) <+>
                    singletonBuffer (JMP (lab))]
                esac
            esac
        esac
    -- DoWhile ?
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}

fun getStack(c) {
  c [0]
}

fun getState (c) {
  c [1]
}

fun getWorld (c) {
  c [2]
}
