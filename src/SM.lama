-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInsn (c, insn) {
  case insn of
    READ       -> case readWorld (getWorld (c)) of
                    [v, w] -> [ v : getStack (c), getState (c), w ]
                  esac
  | WRITE      -> case getStack (c) of
                    x : xs -> case writeWorld (x, getWorld (c)) of
                                w -> [ xs, getState (c), w ]
                              esac
                  esac
  | BINOP (op) -> case getStack (c) of
                    y : x : xs -> [ evalOp (op, x, y) : xs, getState (c), getWorld (c) ]
                  esac
  | LD    (x)  -> [ getState (c) (x) : getStack (c), getState (c), getWorld (c) ]
  | ST    (x)  -> case getStack (c) of
                    v : vs -> [ vs, getState (c) <- [ x, v ], getWorld (c) ]
                  esac
  | CONST (n)  -> [ n : getStack (c), getState (c), getWorld (c) ]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {}     -> c
  | x : xs -> eval (evalInsn (c, x), xs)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var   (x)        -> { LD (x) }
  | Const (n)        -> { CONST (n) }
  | Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (x, e)   -> compileExpr (e) +++ { ST (x) }
  | Seq   (s1, s2) -> compileSM (s1) +++ compileSM (s2) 
  | Write (e)      -> compileExpr (e) +++ { WRITE }
  | Read  (x)      -> { READ, ST (x) }
  esac
}

fun getStack(c) {
  c [0]
}

fun getState (c) {
  c [1]
}

fun getWorld (c) {
  c [2]
}
