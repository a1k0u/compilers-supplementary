-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalInsn (env, c, insn) {
  case insn of
    READ         -> case readWorld (getWorld (c)) of
                      [v, w] -> [ v : getStack (c), getState (c), w ]
                    esac
  | WRITE        -> case getStack (c) of
                      x : xs -> case writeWorld (x, getWorld (c)) of
                                  w -> [ xs, getState (c), w ]
                                esac
                    esac
  | BINOP (op)   -> case getStack (c) of
                      y : x : xs -> [ evalOp (op, x, y) : xs, getState (c), getWorld (c) ]
                    esac
  | LD    (x)    -> [ getState (c) (x) : getStack (c), getState (c), getWorld (c) ]
  | ST    (x)    -> case getStack (c) of
                      v : vs -> [ vs, getState (c) <- [ x, v ], getWorld (c) ]
                    esac
  | CONST (n)    -> [ n : getStack (c), getState (c), getWorld (c) ]
  | LABEL (l)    -> c
  | JMP   (l)    -> [c, env.fromLabel (l)]
  -- TODO: make more dry
  | CJMP  (z, l) -> case getStack (c) of
                      x : xs -> case z of
                                  "nz" -> case x of
                                            0 -> [ xs, getState (c), getWorld (c) ]
                                          | _ -> [[ xs, getState (c), getWorld (c) ], env.fromLabel (l)]
                                          esac
                                | "z"  -> case x of
                                            0 -> [[ xs, getState (c), getWorld (c) ], env.fromLabel (l)]
                                          | _ -> [ xs, getState (c), getWorld (c) ]
                                          esac
                                esac
                    esac
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {}     -> c
  | x : xs -> 
    case evalInsn (env, c, x) of
      c@[_, _, _] -> eval (env, c, xs)
    | [c@[_, _, _], insns] -> eval (env, c, insns)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var   (x)        -> singletonBuffer (LD (x))
  | Const (n)        -> singletonBuffer (CONST (n))
  | Binop (op, l, r) -> compileExpr(l) <+> compileExpr(r) <+ BINOP (op)
  | _  -> failure ("failed compileExpr\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) ->
        case env.genLabel of
          [elseLab, env] ->
            case compile (lab, env, s1) of
              [_, env, s1Code] ->
                case compile (lab, env, s2) of
                  -- TODO: `JUMP (lab)` if lab used?
                  [_, env, s2Code] -> [true, env, 
                      compileExpr(e)                        <+> 
                      singletonBuffer (CJMP ("z", elseLab)) <+> 
                      s1Code                                <+> 
                      singletonBuffer (JMP (lab))           <+> 
                      singletonBuffer (LABEL (elseLab))     <+> 
                      s2Code]
                esac
            esac
        esac
    | While (e, s1) ->
        case env.genLabels (2) of
          [eLab, s1Lab, env] -> 
            case compile (eLab, env, s1) of
              -- TODO: lab used?
              [_, env, s1Code] -> [true, env, 
                  singletonBuffer (JMP (eLab))         <+> 
                  singletonBuffer (LABEL (s1Lab))      <+>
                  s1Code                               <+>
                  singletonBuffer (LABEL (eLab))       <+>
                  compileExpr(e)                       <+>
                  singletonBuffer (CJMP ("nz", s1Lab)) <+>
                  singletonBuffer (JMP (lab))]
            esac
        esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
        | _ -> failure ("failed here0\n")
       esac
  esac
}

fun getStack(c) {
  c [0]
}

fun getState (c) {
  c [1]
}

fun getWorld (c) {
  c [2]
}

-- public fun compileSM (stmt) {
--   -- printf ("%s\n", showStmt(stmt));

--   case stmt of
--     Assn  (x, e)   -> compileExpr (e) +++ { ST (x) }
--   | Seq   (s1, s2) -> compileSM (s1) +++ compileSM (s2) 
--   | Write (e)      -> compileExpr (e) +++ { WRITE }
--   | Read  (x)      -> { READ, ST (x) }
--   esac
-- }
