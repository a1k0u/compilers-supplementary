-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case stmt of
    Assn  (x, e)   -> [ getState (c) <- [ x, evalExpr (getState (c), e) ], getWorld (c) ]
  | Seq   (s1, s2) -> eval (eval (c, s1), s2)
  | Skip           -> c
  | Read  (x)      -> case readWorld (getWorld (c)) of
                        [v, w] -> [ getState (c) <- [ x, v ], w ]
                      esac
  | Write (e)      -> [ getState (c), writeWorld (evalExpr (getState (c), e), getWorld (c)) ]
  | If (e, s1, s2) -> case evalExpr (getState (c), e) of
                        0 -> eval (c, s2)
                      | _ -> eval (c, s1)
                      esac
  | While (e, s1)  -> case evalExpr (getState (c), e) of
                        0 -> c
                      | _ -> eval (eval (c, s1), stmt)
                      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  -- case stmt of
  --   0 -> failure("dss") 
  -- esac;

  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}

fun getState (c) {
  c.fst
}

fun getWorld (c) {
  c.snd
}
